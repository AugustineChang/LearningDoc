//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gCameraPosW;                // Offset:    0, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWVP;                      // Offset:    0, size:   64
    float4x4 gWorld;                    // Offset:   64, size:   64
    float4x4 gTexTransform;             // Offset:  128, size:   64
    Material gMaterial;                 // Offset:  192, size:   48
}

//
// 2 local object(s)
//
Texture2D diffuseTex;
SamplerState linearSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 TessTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   v1.x <- vin.texcoord.x; v1.y <- vin.texcoord.y; 
                //   o1.x <- <VS return value>.texcoord.x; o1.y <- <VS return value>.texcoord.y; 
                //   o0.x <- <VS return value>.posL.x; o0.y <- <VS return value>.posL.y; o0.z <- <VS return value>.posL.z
                //
                #line 42 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\TessellationShader.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.posL.x; r0.y <- vout.posL.y; r0.z <- vout.posL.z
                
                #line 43
                mov r1.xy, v1.xyxx  // r1.x <- vout.texcoord.x; r1.y <- vout.texcoord.y
                
                #line 45
                mov o0.xyz, r0.xyzx
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gCameraPosW;                // Offset:    0 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gTexTransform;            // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } gMaterial;                       // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[7], immediateIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- controlPointIndex; 
                //   vPrim.x <- patchID; 
                //   o1.x <- <HS return value>.texcoord.x; o1.y <- <HS return value>.texcoord.y; 
                //   o0.x <- <HS return value>.posL.x; o0.y <- <HS return value>.posL.y; o0.z <- <HS return value>.posL.z; 
                //   v[0][0].x <- patch[0].posL.x; v[0][0].y <- patch[0].posL.y; v[0][0].z <- patch[0].posL.z; 
                //   v[0][1].x <- patch[0].texcoord.x; v[0][1].y <- patch[0].texcoord.y; 
                //   v[1][0].x <- patch[1].posL.x; v[1][0].y <- patch[1].posL.y; v[1][0].z <- patch[1].posL.z; 
                //   v[1][1].x <- patch[1].texcoord.x; v[1][1].y <- patch[1].texcoord.y; 
                //   v[2][0].x <- patch[2].posL.x; v[2][0].y <- patch[2].posL.y; v[2][0].z <- patch[2].posL.z; 
                //   v[2][1].x <- patch[2].texcoord.x; v[2][1].y <- patch[2].texcoord.y; 
                //   v[3][0].x <- patch[3].posL.x; v[3][0].y <- patch[3].posL.y; v[3][0].z <- patch[3].posL.z; 
                //   v[3][1].x <- patch[3].texcoord.x; v[3][1].y <- patch[3].texcoord.y
                //
                #line 96 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\TessellationShader.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.posL.x; r0.z <- hout.posL.y; r0.w <- hout.posL.z
                
                #line 97
                mov r1.xy, v[r0.x + 0][1].xyxx  // r1.x <- hout.texcoord.x; r1.y <- hout.texcoord.y
                
                #line 99
                mov o0.xyz, r0.yzwy
                mov o1.xy, r1.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[4][0].xyz
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 2
                
                #line 58
                add r0.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                add r0.xyz, r0.xyzx, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, vicp[3][0].xyzx
                mul r0.xyz, r0.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // r0.x <- center.x; r0.y <- center.y; r0.z <- center.z
                
                #line 59
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[4].xyzw  // r1.x <- centerW.x
                dp4 r1.y, r0.xyzw, cb1[5].xyzw  // r1.y <- centerW.y
                dp4 r1.z, r0.xyzw, cb1[6].xyzw  // r1.z <- centerW.z
                
                #line 61
                mov r0.xyz, -cb0[0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- dist
                
                #line 63
                mov r0.y, l(100.000000)  // r0.y <- max
                
                #line 64
                mov r0.z, l(20.000000)  // r0.z <- min
                
                #line 65
                mov r0.x, -r0.x
                add r0.x, r0.x, r0.y
                mov r0.z, -r0.z
                add r0.y, r0.z, r0.y
                div r0.x, r0.x, r0.y
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r0.w, r0.x, l(64.000000)  // r0.w <- tess
                
                #line 67
                mov r1.x, r0.w  // r1.x <- ps.edgeTess[0]
                
                #line 68
                mov r1.y, r0.w  // r1.y <- ps.edgeTess[1]
                
                #line 69
                mov r0.x, r0.w  // r0.x <- ps.edgeTess[2]
                
                #line 70
                mov r0.y, r0.w  // r0.y <- ps.edgeTess[3]
                
                #line 72
                mov r0.z, r0.w  // r0.z <- ps.insideTess[0]
                
                #line 73
                mov r0.w, r0.w  // r0.w <- ps.insideTess[1]
                
                #line 75
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.edgeTess[2]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.edgeTess[3]
                mov r0.z, r0.z  // r0.z <- <ConstantHS return value>.insideTess[0]
                mov r0.w, r0.w  // r0.w <- <ConstantHS return value>.insideTess[1]
                mov r1.x, r1.x  // r1.x <- <ConstantHS return value>.edgeTess[0]
                mov r1.y, r1.y  // r1.y <- <ConstantHS return value>.edgeTess[1]
                min o0.x, r1.x, l(64.000000)
                min o1.x, r1.y, l(64.000000)
                min r0.xyzw, r0.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)
                mov o2.x, r0.x
                mov o3.x, r0.y
                mov o4.x, r0.z
                mov o5.x, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } gMaterial;                       // Offset:  192 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   x z 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[10], immediateIndexed
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.edgeTess[0]; 
                //   vpc1.x <- patchTess.edgeTess[1]; 
                //   vpc2.x <- patchTess.edgeTess[2]; 
                //   vpc3.x <- patchTess.edgeTess[3]; 
                //   vpc4.x <- patchTess.insideTess[0]; 
                //   vpc5.x <- patchTess.insideTess[1]; 
                //   vDomain.x <- domainUV.x; vDomain.y <- domainUV.y; 
                //   o1.x <- <DS return value>.texUV.x; o1.y <- <DS return value>.texUV.y; 
                //   o0.x <- <DS return value>.posH.x; o0.y <- <DS return value>.posH.y; o0.z <- <DS return value>.posH.z; o0.w <- <DS return value>.posH.w; 
                //   vicp[0][0].x <- quad[0].posL.x; vicp[0][0].y <- quad[0].posL.y; vicp[0][0].z <- quad[0].posL.z; 
                //   vicp[0][1].x <- quad[0].texcoord.x; vicp[0][1].y <- quad[0].texcoord.y; 
                //   vicp[1][0].x <- quad[1].posL.x; vicp[1][0].y <- quad[1].posL.y; vicp[1][0].z <- quad[1].posL.z; 
                //   vicp[1][1].x <- quad[1].texcoord.x; vicp[1][1].y <- quad[1].texcoord.y; 
                //   vicp[2][0].x <- quad[2].posL.x; vicp[2][0].y <- quad[2].posL.y; vicp[2][0].z <- quad[2].posL.z; 
                //   vicp[2][1].x <- quad[2].texcoord.x; vicp[2][1].y <- quad[2].texcoord.y; 
                //   vicp[3][0].x <- quad[3].posL.x; vicp[3][0].y <- quad[3].posL.y; vicp[3][0].z <- quad[3].posL.z; 
                //   vicp[3][1].x <- quad[3].texcoord.x; vicp[3][1].y <- quad[3].texcoord.y
                //
                #line 115 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\TessellationShader.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx  // r0.x <- v1.x; r0.y <- v1.z
                
                #line 116
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz  // r0.z <- v2.x; r0.w <- v2.z
                
                #line 117
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // r0.x <- curPoint.x; r0.z <- curPoint.z
                
                #line 118
                sincos r1.x, null, r0.x
                mul r1.x, r0.z, r1.x
                sincos null, r1.y, r0.z
                mul r1.y, r0.x, r1.y
                add r1.x, r1.y, r1.x
                mul r0.y, r1.x, l(0.300000)  // r0.y <- curPoint.y
                
                #line 120
                itof r1.x, l(1)
                mov r1.y, -vDomain.x
                add r1.x, r1.y, r1.x
                mov r1.yz, -vicp[0][1].xxyx
                add r1.yz, r1.yyzy, vicp[1][1].xxyx
                mul r1.xy, r1.yzyy, r1.xxxx
                add r1.xy, r1.xyxx, vicp[0][1].xyxx  // r1.x <- uv1.x; r1.y <- uv1.y
                
                #line 121
                itof r1.z, l(1)
                mov r1.w, -vDomain.x
                add r1.z, r1.w, r1.z
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r1.zw, r1.zzzz, r2.xxxy
                add r1.zw, r1.zzzw, vicp[2][1].xxxy  // r1.z <- uv2.x; r1.w <- uv2.y
                
                #line 122
                mov r2.xy, -r1.xyxx
                add r1.zw, r1.zzzw, r2.xxxy
                mul r1.zw, r1.zzzw, vDomain.yyyy
                add r1.xy, r1.zwzz, r1.xyxx  // r1.x <- curUV.x; r1.y <- curUV.y
                
                #line 124
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- dout.posH.x
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- dout.posH.y
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // r2.z <- dout.posH.z
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // r2.w <- dout.posH.w
                
                #line 125
                mov r1.zw, l(0,0,0,1.000000)
                dp4 r0.x, r1.xyzw, cb0[8].xyzw  // r0.x <- dout.texUV.x
                dp4 r0.y, r1.xyzw, cb0[9].xyzw  // r0.y <- dout.texUV.y
                
                #line 127
                mov o0.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 47 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } gMaterial;                       // Offset:  192 Size:    48
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // linearSampler                     sampler      NA          NA             s0      1 
                // diffuseTex                        texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- d2p.posH.x; v0.y <- d2p.posH.y; v0.z <- d2p.posH.z; v0.w <- d2p.posH.w; 
                //   v1.x <- d2p.texUV.x; v1.y <- d2p.texUV.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 135 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\TessellationShader.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texCol.x; r0.y <- texCol.y; r0.z <- texCol.z
                
                #line 137
                mov r0.w, cb0[13].w  // r0.w <- texCol.w
                
                #line 139
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

}

