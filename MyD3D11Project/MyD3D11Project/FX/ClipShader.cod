//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirectLight;      // Offset:    0, size:   64
    float3  gCameraPosW;                // Offset:   64, size:   12
    float   gFogStart;                  // Offset:   76, size:    4
    float   gFogDistance;               // Offset:   80, size:    4
    float4  gFogColor;                  // Offset:   96, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWVP;                      // Offset:    0, size:   64
    float4x4 gWorld;                    // Offset:   64, size:   64
    float4x4 gWorldNormal;              // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   48
}

//
// 2 local object(s)
//
Texture2D diffuseTex;
SamplerState linearSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 5 technique(s)
    //
    technique11 LightTech_Lit_Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   v1.x <- vin.normalL.x; v1.y <- vin.normalL.y; v1.z <- vin.normalL.z; 
                //   v2.x <- vin.texcoord.x; v2.y <- vin.texcoord.y; 
                //   o4.x <- <VS return value>.tex.x; o4.y <- <VS return value>.tex.y; 
                //   o3.x <- <VS return value>.color.x; o3.y <- <VS return value>.color.y; o3.z <- <VS return value>.color.z; o3.w <- <VS return value>.color.w; 
                //   o2.x <- <VS return value>.normalW.x; o2.y <- <VS return value>.normalW.y; o2.z <- <VS return value>.normalW.z; 
                //   o1.x <- <VS return value>.posW.x; o1.y <- <VS return value>.posW.y; o1.z <- <VS return value>.posW.z; 
                //   o0.x <- <VS return value>.posH.x; o0.y <- <VS return value>.posH.y; o0.z <- <VS return value>.posH.z; o0.w <- <VS return value>.posH.w
                //
                #line 54 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.posH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.posH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.posH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.posH.w
                
                #line 55
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // r2.x <- vout.posW.x
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // r2.y <- vout.posW.y
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // r2.z <- vout.posW.z
                
                #line 56
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normalW.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normalW.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normalW.z
                
                #line 57
                mov r3.xyz, v1.xyzx  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z
                mov r3.w, l(1.000000)  // r3.w <- vout.color.w
                
                #line 58
                mov r4.xy, v2.xyxx
                mov r4.zw, l(0,0,0,1.000000)
                dp4 r5.x, r4.xyzw, cb0[12].xyzw  // r5.x <- vout.tex.x
                dp4 r5.y, r4.xyzw, cb0[13].xyzw  // r5.y <- vout.tex.y
                
                #line 60
                mov o0.xyzw, r1.xyzw
                mov o3.xyzw, r3.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r0.xyzx
                mov o4.xy, r5.xyxx
                ret 
                // Approximately 24 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float3 direction;              // Offset:    0
                //       float pad;                     // Offset:   12
                //       float4 ambientColor;           // Offset:   16
                //       float4 diffuseColor;           // Offset:   32
                //       float4 specularColor;          // Offset:   48
                //
                //   } gDirectLight;                    // Offset:    0 Size:    64
                //   float3 gCameraPosW;                // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogDistance;                // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // linearSampler                     sampler      NA          NA             s0      1 
                // diffuseTex                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 11
                //
                // Initial variable locations:
                //   v0.x <- v2p.posH.x; v0.y <- v2p.posH.y; v0.z <- v2p.posH.z; v0.w <- v2p.posH.w; 
                //   v1.x <- v2p.posW.x; v1.y <- v2p.posW.y; v1.z <- v2p.posW.z; 
                //   v2.x <- v2p.normalW.x; v2.y <- v2p.normalW.y; v2.z <- v2p.normalW.z; 
                //   v3.x <- v2p.color.x; v3.y <- v2p.color.y; v3.z <- v2p.color.z; v3.w <- v2p.color.w; 
                //   v4.x <- v2p.tex.x; v4.y <- v2p.tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 71 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texCol.x; r0.y <- texCol.y; r0.z <- texCol.z; r0.w <- texCol.w
                
                #line 72
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 78
                dp3 r1.x, v2.xyzx, v2.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- v2p.normalW.x; r1.y <- v2p.normalW.y; r1.z <- v2p.normalW.z
                
                #line 79
                mov r2.xyz, -v1.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- viewW.x; r2.y <- viewW.y; r2.z <- viewW.z
                
                #line 80
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- dist2View
                
                #line 81
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 87
                nop 
                mov r3.xyzw, cb0[1].xyzw
                mov r4.xyzw, cb0[2].xyzw
                mov r5.xyzw, cb0[3].xyzw
                mov r6.xyz, cb0[0].xyzx
                mov r7.xyzw, cb1[16].xyzw
                mov r8.xyzw, cb1[17].xyzw
                mov r9.xyzw, cb1[18].xyzw
                mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                mov r1.xyz, r1.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 55 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\Lights.fx"
                mov r6.xyz, -r6.xyzx  // r6.x <- lightDir.x; r6.y <- lightDir.y; r6.z <- lightDir.z
                
                #line 56
                dp3 r1.w, r6.xyzx, r1.xyzx  // r1.w <- diffuseFactor
                
                #line 58
                mul r4.xyzw, r4.xyzw, r8.xyzw
                itof r2.w, l(0)
                max r2.w, r1.w, r2.w
                mul r4.xyzw, r2.wwww, r4.xyzw
                mul r4.xyzw, r10.xyzw, r4.xyzw  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z; r4.w <- diffuse.w
                
                #line 59
                mul r3.xyzw, r3.xyzw, r7.xyzw  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z; r3.w <- ambient.w
                
                #line 61
                itof r2.w, l(0)
                ge r1.w, r1.w, r2.w
                movc r1.w, r1.w, l(1.000000), l(0)  // r1.w <- hasSpec
                
                #line 62
                mov r6.xyz, -r6.xyzx
                dp3 r2.w, r6.xyzx, r1.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r1.xyz, r1.xyzx, r2.wwww
                add r1.xyz, r6.xyzx, r1.xyzx
                dp3 r1.x, r1.xyzx, r2.xyzx
                itof r1.y, l(0)
                max r1.x, r1.y, r1.x
                log r1.x, r1.x
                mul r1.x, r1.x, r9.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 63
                mul r2.xyzw, r5.xyzw, r9.xyzw
                mul r2.xyzw, r1.xxxx, r2.xyzw
                mul r1.xyzw, r1.wwww, r2.xyzw  // r1.x <- specular.x; r1.y <- specular.y; r1.z <- specular.z; r1.w <- specular.w
                
                #line 87 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r4.xyzw, r4.xyzw  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z; r4.w <- diffuse.w
                mov r1.xyzw, r1.xyzw  // r1.x <- specular.x; r1.y <- specular.y; r1.z <- specular.z; r1.w <- specular.w
                mov r3.xyzw, r3.xyzw  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z; r3.w <- ambient.w
                
                #line 90
                add r2.xyzw, r3.xyzw, r4.xyzw
                mul r0.xyzw, r0.xyzw, r2.xyzw
                add r0.xyzw, r1.xyzw, r0.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 103
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 59 instruction slots used
                            
            };
        }

    }

    technique11 LightTech_Lit_Tex_Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   v1.x <- vin.normalL.x; v1.y <- vin.normalL.y; v1.z <- vin.normalL.z; 
                //   v2.x <- vin.texcoord.x; v2.y <- vin.texcoord.y; 
                //   o4.x <- <VS return value>.tex.x; o4.y <- <VS return value>.tex.y; 
                //   o3.x <- <VS return value>.color.x; o3.y <- <VS return value>.color.y; o3.z <- <VS return value>.color.z; o3.w <- <VS return value>.color.w; 
                //   o2.x <- <VS return value>.normalW.x; o2.y <- <VS return value>.normalW.y; o2.z <- <VS return value>.normalW.z; 
                //   o1.x <- <VS return value>.posW.x; o1.y <- <VS return value>.posW.y; o1.z <- <VS return value>.posW.z; 
                //   o0.x <- <VS return value>.posH.x; o0.y <- <VS return value>.posH.y; o0.z <- <VS return value>.posH.z; o0.w <- <VS return value>.posH.w
                //
                #line 54 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.posH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.posH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.posH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.posH.w
                
                #line 55
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // r2.x <- vout.posW.x
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // r2.y <- vout.posW.y
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // r2.z <- vout.posW.z
                
                #line 56
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normalW.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normalW.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normalW.z
                
                #line 57
                mov r3.xyz, v1.xyzx  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z
                mov r3.w, l(1.000000)  // r3.w <- vout.color.w
                
                #line 58
                mov r4.xy, v2.xyxx
                mov r4.zw, l(0,0,0,1.000000)
                dp4 r5.x, r4.xyzw, cb0[12].xyzw  // r5.x <- vout.tex.x
                dp4 r5.y, r4.xyzw, cb0[13].xyzw  // r5.y <- vout.tex.y
                
                #line 60
                mov o0.xyzw, r1.xyzw
                mov o3.xyzw, r3.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r0.xyzx
                mov o4.xy, r5.xyxx
                ret 
                // Approximately 24 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float3 direction;              // Offset:    0
                //       float pad;                     // Offset:   12
                //       float4 ambientColor;           // Offset:   16
                //       float4 diffuseColor;           // Offset:   32
                //       float4 specularColor;          // Offset:   48
                //
                //   } gDirectLight;                    // Offset:    0 Size:    64
                //   float3 gCameraPosW;                // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4
                //   float gFogDistance;                // Offset:   80 Size:     4
                //   float4 gFogColor;                  // Offset:   96 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // linearSampler                     sampler      NA          NA             s0      1 
                // diffuseTex                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[7], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 11
                //
                // Initial variable locations:
                //   v0.x <- v2p.posH.x; v0.y <- v2p.posH.y; v0.z <- v2p.posH.z; v0.w <- v2p.posH.w; 
                //   v1.x <- v2p.posW.x; v1.y <- v2p.posW.y; v1.z <- v2p.posW.z; 
                //   v2.x <- v2p.normalW.x; v2.y <- v2p.normalW.y; v2.z <- v2p.normalW.z; 
                //   v3.x <- v2p.color.x; v3.y <- v2p.color.y; v3.z <- v2p.color.z; v3.w <- v2p.color.w; 
                //   v4.x <- v2p.tex.x; v4.y <- v2p.tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 71 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texCol.x; r0.y <- texCol.y; r0.z <- texCol.z; r0.w <- texCol.w
                
                #line 72
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 78
                dp3 r1.x, v2.xyzx, v2.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- v2p.normalW.x; r1.y <- v2p.normalW.y; r1.z <- v2p.normalW.z
                
                #line 79
                mov r2.xyz, -v1.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- viewW.x; r2.y <- viewW.y; r2.z <- viewW.z
                
                #line 80
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- dist2View
                
                #line 81
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 87
                nop 
                mov r3.xyzw, cb0[1].xyzw
                mov r4.xyzw, cb0[2].xyzw
                mov r5.xyzw, cb0[3].xyzw
                mov r6.xyz, cb0[0].xyzx
                mov r7.xyzw, cb1[16].xyzw
                mov r8.xyzw, cb1[17].xyzw
                mov r9.xyzw, cb1[18].xyzw
                mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                mov r1.xyz, r1.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 55 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\Lights.fx"
                mov r6.xyz, -r6.xyzx  // r6.x <- lightDir.x; r6.y <- lightDir.y; r6.z <- lightDir.z
                
                #line 56
                dp3 r2.w, r6.xyzx, r1.xyzx  // r2.w <- diffuseFactor
                
                #line 58
                mul r4.xyzw, r4.xyzw, r8.xyzw
                itof r6.w, l(0)
                max r6.w, r2.w, r6.w
                mul r4.xyzw, r4.xyzw, r6.wwww
                mul r4.xyzw, r10.xyzw, r4.xyzw  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z; r4.w <- diffuse.w
                
                #line 59
                mul r3.xyzw, r3.xyzw, r7.xyzw  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z; r3.w <- ambient.w
                
                #line 61
                itof r6.w, l(0)
                ge r2.w, r2.w, r6.w
                movc r2.w, r2.w, l(1.000000), l(0)  // r2.w <- hasSpec
                
                #line 62
                mov r6.xyz, -r6.xyzx
                dp3 r6.w, r6.xyzx, r1.xyzx
                add r6.w, r6.w, r6.w
                mov r6.w, -r6.w
                mul r1.xyz, r1.xyzx, r6.wwww
                add r1.xyz, r6.xyzx, r1.xyzx
                dp3 r1.x, r1.xyzx, r2.xyzx
                itof r1.y, l(0)
                max r1.x, r1.y, r1.x
                log r1.x, r1.x
                mul r1.x, r1.x, r9.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 63
                mul r5.xyzw, r5.xyzw, r9.xyzw
                mul r5.xyzw, r1.xxxx, r5.xyzw
                mul r2.xyzw, r2.wwww, r5.xyzw  // r2.x <- specular.x; r2.y <- specular.y; r2.z <- specular.z; r2.w <- specular.w
                
                #line 87 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r4.xyzw, r4.xyzw  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z; r4.w <- diffuse.w
                mov r2.xyzw, r2.xyzw  // r2.x <- specular.x; r2.y <- specular.y; r2.z <- specular.z; r2.w <- specular.w
                mov r3.xyzw, r3.xyzw  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z; r3.w <- ambient.w
                
                #line 90
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r0.xyzw, r0.xyzw, r3.xyzw
                add r0.xyzw, r2.xyzw, r0.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 93
                mov r1.x, -cb0[4].w
                add r1.x, r1.x, r1.w
                div r1.x, r1.x, cb0[5].x  // r1.x <- fogFactor
                
                #line 94
                max r1.x, r1.x, l(0.000000)
                min r1.x, r1.x, l(1.000000)  // r1.x <- fogFactor
                
                #line 95
                mov r2.xyzw, -r0.xyzw
                add r2.xyzw, r2.xyzw, cb0[6].xyzw
                mul r1.xyzw, r1.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                
                #line 103
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 68 instruction slots used
                            
            };
        }

    }

    technique11 LightTech_Lit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   v1.x <- vin.normalL.x; v1.y <- vin.normalL.y; v1.z <- vin.normalL.z; 
                //   v2.x <- vin.texcoord.x; v2.y <- vin.texcoord.y; 
                //   o4.x <- <VS return value>.tex.x; o4.y <- <VS return value>.tex.y; 
                //   o3.x <- <VS return value>.color.x; o3.y <- <VS return value>.color.y; o3.z <- <VS return value>.color.z; o3.w <- <VS return value>.color.w; 
                //   o2.x <- <VS return value>.normalW.x; o2.y <- <VS return value>.normalW.y; o2.z <- <VS return value>.normalW.z; 
                //   o1.x <- <VS return value>.posW.x; o1.y <- <VS return value>.posW.y; o1.z <- <VS return value>.posW.z; 
                //   o0.x <- <VS return value>.posH.x; o0.y <- <VS return value>.posH.y; o0.z <- <VS return value>.posH.z; o0.w <- <VS return value>.posH.w
                //
                #line 54 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.posH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.posH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.posH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.posH.w
                
                #line 55
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // r2.x <- vout.posW.x
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // r2.y <- vout.posW.y
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // r2.z <- vout.posW.z
                
                #line 56
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normalW.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normalW.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normalW.z
                
                #line 57
                mov r3.xyz, v1.xyzx  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z
                mov r3.w, l(1.000000)  // r3.w <- vout.color.w
                
                #line 58
                mov r4.xy, v2.xyxx
                mov r4.zw, l(0,0,0,1.000000)
                dp4 r5.x, r4.xyzw, cb0[12].xyzw  // r5.x <- vout.tex.x
                dp4 r5.y, r4.xyzw, cb0[13].xyzw  // r5.y <- vout.tex.y
                
                #line 60
                mov o0.xyzw, r1.xyzw
                mov o3.xyzw, r3.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r0.xyzx
                mov o4.xy, r5.xyxx
                ret 
                // Approximately 24 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float3 direction;              // Offset:    0
                //       float pad;                     // Offset:   12
                //       float4 ambientColor;           // Offset:   16
                //       float4 diffuseColor;           // Offset:   32
                //       float4 specularColor;          // Offset:   48
                //
                //   } gDirectLight;                    // Offset:    0 Size:    64
                //   float3 gCameraPosW;                // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogDistance;                // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 11
                //
                // Initial variable locations:
                //   v0.x <- v2p.posH.x; v0.y <- v2p.posH.y; v0.z <- v2p.posH.z; v0.w <- v2p.posH.w; 
                //   v1.x <- v2p.posW.x; v1.y <- v2p.posW.y; v1.z <- v2p.posW.z; 
                //   v2.x <- v2p.normalW.x; v2.y <- v2p.normalW.y; v2.z <- v2p.normalW.z; 
                //   v3.x <- v2p.color.x; v3.y <- v2p.color.y; v3.z <- v2p.color.z; v3.w <- v2p.color.w; 
                //   v4.x <- v2p.tex.x; v4.y <- v2p.tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 67 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r0.x <- texCol.x; r0.y <- texCol.y; r0.z <- texCol.z; r0.w <- texCol.w
                
                #line 78
                dp3 r1.x, v2.xyzx, v2.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- v2p.normalW.x; r1.y <- v2p.normalW.y; r1.z <- v2p.normalW.z
                
                #line 79
                mov r2.xyz, -v1.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- viewW.x; r2.y <- viewW.y; r2.z <- viewW.z
                
                #line 80
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- dist2View
                
                #line 81
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 87
                nop 
                mov r3.xyzw, cb0[1].xyzw
                mov r4.xyzw, cb0[2].xyzw
                mov r5.xyzw, cb0[3].xyzw
                mov r6.xyz, cb0[0].xyzx
                mov r7.xyzw, cb1[16].xyzw
                mov r8.xyzw, cb1[17].xyzw
                mov r9.xyzw, cb1[18].xyzw
                mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                mov r1.xyz, r1.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 55 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\Lights.fx"
                mov r6.xyz, -r6.xyzx  // r6.x <- lightDir.x; r6.y <- lightDir.y; r6.z <- lightDir.z
                
                #line 56
                dp3 r1.w, r6.xyzx, r1.xyzx  // r1.w <- diffuseFactor
                
                #line 58
                mul r4.xyzw, r4.xyzw, r8.xyzw
                itof r2.w, l(0)
                max r2.w, r1.w, r2.w
                mul r4.xyzw, r2.wwww, r4.xyzw
                mul r4.xyzw, r10.xyzw, r4.xyzw  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z; r4.w <- diffuse.w
                
                #line 59
                mul r3.xyzw, r3.xyzw, r7.xyzw  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z; r3.w <- ambient.w
                
                #line 61
                itof r2.w, l(0)
                ge r1.w, r1.w, r2.w
                movc r1.w, r1.w, l(1.000000), l(0)  // r1.w <- hasSpec
                
                #line 62
                mov r6.xyz, -r6.xyzx
                dp3 r2.w, r6.xyzx, r1.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r1.xyz, r1.xyzx, r2.wwww
                add r1.xyz, r6.xyzx, r1.xyzx
                dp3 r1.x, r1.xyzx, r2.xyzx
                itof r1.y, l(0)
                max r1.x, r1.y, r1.x
                log r1.x, r1.x
                mul r1.x, r1.x, r9.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 63
                mul r2.xyzw, r5.xyzw, r9.xyzw
                mul r2.xyzw, r1.xxxx, r2.xyzw
                mul r1.xyzw, r1.wwww, r2.xyzw  // r1.x <- specular.x; r1.y <- specular.y; r1.z <- specular.z; r1.w <- specular.w
                
                #line 87 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r4.xyzw, r4.xyzw  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z; r4.w <- diffuse.w
                mov r1.xyzw, r1.xyzw  // r1.x <- specular.x; r1.y <- specular.y; r1.z <- specular.z; r1.w <- specular.w
                mov r3.xyzw, r3.xyzw  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z; r3.w <- ambient.w
                
                #line 90
                add r2.xyzw, r3.xyzw, r4.xyzw
                mul r0.xyzw, r0.xyzw, r2.xyzw
                add r0.xyzw, r1.xyzw, r0.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 103
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 54 instruction slots used
                            
            };
        }

    }

    technique11 LightTech_Unlit_Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   v1.x <- vin.normalL.x; v1.y <- vin.normalL.y; v1.z <- vin.normalL.z; 
                //   v2.x <- vin.texcoord.x; v2.y <- vin.texcoord.y; 
                //   o4.x <- <VS return value>.tex.x; o4.y <- <VS return value>.tex.y; 
                //   o3.x <- <VS return value>.color.x; o3.y <- <VS return value>.color.y; o3.z <- <VS return value>.color.z; o3.w <- <VS return value>.color.w; 
                //   o2.x <- <VS return value>.normalW.x; o2.y <- <VS return value>.normalW.y; o2.z <- <VS return value>.normalW.z; 
                //   o1.x <- <VS return value>.posW.x; o1.y <- <VS return value>.posW.y; o1.z <- <VS return value>.posW.z; 
                //   o0.x <- <VS return value>.posH.x; o0.y <- <VS return value>.posH.y; o0.z <- <VS return value>.posH.z; o0.w <- <VS return value>.posH.w
                //
                #line 54 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.posH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.posH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.posH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.posH.w
                
                #line 55
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // r2.x <- vout.posW.x
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // r2.y <- vout.posW.y
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // r2.z <- vout.posW.z
                
                #line 56
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normalW.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normalW.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normalW.z
                
                #line 57
                mov r3.xyz, v1.xyzx  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z
                mov r3.w, l(1.000000)  // r3.w <- vout.color.w
                
                #line 58
                mov r4.xy, v2.xyxx
                mov r4.zw, l(0,0,0,1.000000)
                dp4 r5.x, r4.xyzw, cb0[12].xyzw  // r5.x <- vout.tex.x
                dp4 r5.y, r4.xyzw, cb0[13].xyzw  // r5.y <- vout.tex.y
                
                #line 60
                mov o0.xyzw, r1.xyzw
                mov o3.xyzw, r3.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r0.xyzx
                mov o4.xy, r5.xyxx
                ret 
                // Approximately 24 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // linearSampler                     sampler      NA          NA             s0      1 
                // diffuseTex                        texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- v2p.posH.x; v0.y <- v2p.posH.y; v0.z <- v2p.posH.z; v0.w <- v2p.posH.w; 
                //   v1.x <- v2p.posW.x; v1.y <- v2p.posW.y; v1.z <- v2p.posW.z; 
                //   v2.x <- v2p.normalW.x; v2.y <- v2p.normalW.y; v2.z <- v2p.normalW.z; 
                //   v3.x <- v2p.color.x; v3.y <- v2p.color.y; v3.z <- v2p.color.z; v3.w <- v2p.color.w; 
                //   v4.x <- v2p.tex.x; v4.y <- v2p.tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 71 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texCol.x; r0.y <- texCol.y; r0.z <- texCol.z; r0.w <- texCol.w
                
                #line 72
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 100
                mul r0.xyzw, r0.xyzw, v3.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 103
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 LightTech_Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gWorldNormal;             // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  256
                //       float4 diffuse;                // Offset:  272
                //       float4 specular;               // Offset:  288
                //
                //   } gMaterial;                       // Offset:  256 Size:    48 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   v1.x <- vin.normalL.x; v1.y <- vin.normalL.y; v1.z <- vin.normalL.z; 
                //   v2.x <- vin.texcoord.x; v2.y <- vin.texcoord.y; 
                //   o4.x <- <VS return value>.tex.x; o4.y <- <VS return value>.tex.y; 
                //   o3.x <- <VS return value>.color.x; o3.y <- <VS return value>.color.y; o3.z <- <VS return value>.color.z; o3.w <- <VS return value>.color.w; 
                //   o2.x <- <VS return value>.normalW.x; o2.y <- <VS return value>.normalW.y; o2.z <- <VS return value>.normalW.z; 
                //   o1.x <- <VS return value>.posW.x; o1.y <- <VS return value>.posW.y; o1.z <- <VS return value>.posW.z; 
                //   o0.x <- <VS return value>.posH.x; o0.y <- <VS return value>.posH.y; o0.z <- <VS return value>.posH.z; o0.w <- <VS return value>.posH.w
                //
                #line 54 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.posH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.posH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.posH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.posH.w
                
                #line 55
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // r2.x <- vout.posW.x
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // r2.y <- vout.posW.y
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // r2.z <- vout.posW.z
                
                #line 56
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.normalW.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.normalW.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.normalW.z
                
                #line 57
                mov r3.xyz, v1.xyzx  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z
                mov r3.w, l(1.000000)  // r3.w <- vout.color.w
                
                #line 58
                mov r4.xy, v2.xyxx
                mov r4.zw, l(0,0,0,1.000000)
                dp4 r5.x, r4.xyzw, cb0[12].xyzw  // r5.x <- vout.tex.x
                dp4 r5.y, r4.xyzw, cb0[13].xyzw  // r5.y <- vout.tex.y
                
                #line 60
                mov o0.xyzw, r1.xyzw
                mov o3.xyzw, r3.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r0.xyzx
                mov o4.xy, r5.xyxx
                ret 
                // Approximately 24 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- v2p.posH.x; v0.y <- v2p.posH.y; v0.z <- v2p.posH.z; v0.w <- v2p.posH.w; 
                //   v1.x <- v2p.posW.x; v1.y <- v2p.posW.y; v1.z <- v2p.posW.z; 
                //   v2.x <- v2p.normalW.x; v2.y <- v2p.normalW.y; v2.z <- v2p.normalW.z; 
                //   v3.x <- v2p.color.x; v3.y <- v2p.color.y; v3.z <- v2p.color.z; v3.w <- v2p.color.w; 
                //   v4.x <- v2p.tex.x; v4.y <- v2p.tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 67 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\ClipShader.fx"
                mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r0.x <- texCol.x; r0.y <- texCol.y; r0.z <- texCol.z; r0.w <- texCol.w
                
                #line 100
                mul r0.xyzw, r0.xyzw, v3.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 103
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

}

