//
// FX Version: fx_5_0
//
// 3 local object(s)
//
DepthStencilState DSS
{
    DepthEnable = bool(TRUE /* true */);
    DepthWriteMask = uint(ZERO /* 0 */);
    StencilEnable = bool(TRUE /* true */);
    StencilReadMask = byte(0xff);
    StencilWriteMask = byte(0xff);
    FrontFaceStencilFunc = uint(ALWAYS /* 8 */);
    FrontFaceStencilPass = uint(KEEP /* 1 */);
    FrontFaceStencilFail = uint(KEEP /* 1 */);
    BackFaceStencilFunc = uint(ALWAYS /* 8 */);
    BackFaceStencilPass = uint(KEEP /* 1 */);
    BackFaceStencilFail = uint(KEEP /* 1 */);
};
Texture2D depthBuffer;
SamplerState linearSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 DebugTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VERTEXID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vI; 
                //   o1.x <- <VS return value>.tex.x; o1.y <- <VS return value>.tex.y; 
                //   o0.x <- <VS return value>.posH.x; o0.y <- <VS return value>.posH.y; o0.z <- <VS return value>.posH.z; o0.w <- <VS return value>.posH.w
                //
                #line 37 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\DebugShader.fx"
                mov r0.x, l(1)
                and r0.x, r0.x, v0.x
                mov r0.y, l(1)
                ushr r0.y, v0.x, r0.y
                utof r1.x, r0.x  // r1.x <- texcoord.x
                utof r1.y, r0.y  // r1.y <- texcoord.y
                
                #line 38
                mov r1.xy, r1.xyxx  // r1.x <- vout.tex.x; r1.y <- vout.tex.y
                
                #line 39
                mov r0.x, l(-0.500000)
                add r0.x, r0.x, r1.x
                itof r0.y, l(2)
                mul r0.x, r0.y, r0.x  // r0.x <- vout.posH.x
                mov r1.z, l(-0.500000)
                add r1.z, r1.z, r1.y
                mov r1.z, -r1.z
                itof r1.w, l(2)
                mul r0.y, r1.w, r1.z  // r0.y <- vout.posH.y
                itof r0.zw, l(0, 0, 0, 1)  // r0.z <- vout.posH.z; r0.w <- vout.posH.w
                
                #line 41
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // linearSampler                     sampler      NA          NA             s0      1 
                // depthBuffer                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- v2p.posH.x; v0.y <- v2p.posH.y; v0.z <- v2p.posH.z; v0.w <- v2p.posH.w; 
                //   v1.x <- v2p.tex.x; v1.y <- v2p.tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 46 "D:\Projects\LearningDoc\MyD3D11Project\MyD3D11Project\FX\DebugShader.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- depth.x; r0.y <- depth.y; r0.z <- depth.z
                
                #line 47
                itof o0.w, l(1)
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

}

